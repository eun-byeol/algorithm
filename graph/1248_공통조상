from collections import deque
INF = int(1e9)

def find_common_parent(N1, N2):
    s = set()
    cur = N1
    while True:
        s.add(parents[cur])
        cur = parents[cur]
        if cur == 1:
            break

    cur = N2
    p = parents[cur]
    while p not in s:
        cur = p
        p = parents[cur]
    return p

def find_size_subtree(root):
    q = deque([])
    q.append(root)
    visited = [False] * (V+1)
    visited[root] = True
    size = 1
    while q:
        cur = q.popleft()
        for nxt in children[cur]:
            if not visited[nxt]:
                q.append(nxt)
                visited[nxt] = True
                size += 1
    return size

T = int(input())
for test_case in range(1, T + 1):
    V, E, N1, N2 = map(int, input().split())
    data = list(map(int, input().split()))
    children = [[] for _ in range(V+1)]
    parents = list(range(V+1))

    for i in range(0, len(data), 2):
        p, c = data[i], data[i+1]
        children[p].append(c)
        parents[c] = p

    sub_root = find_common_parent(N1, N2)
    sub_size = find_size_subtree(sub_root)

    print(f"#{test_case} {sub_root} {sub_size}")
